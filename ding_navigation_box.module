<?php

/**
 * @file
 *
 * Module file for Ding navigation box module.
 *
 * Contains general hooks and the implementation of the 'Ding navigation item'
 * entity, which is used to model content in the navigation box.
 */

// Constants
define('DING_NAV_BOX_PATH', drupal_get_path('module', 'ding_navigation_box'));
define('DING_NAV_BOX_ADMIN_PATH', 'admin/structure/ding-navigation-box');


/**
 * Implements hook_block_info().
 */
function ding_navigation_box_block_info() {
  $blocks = array();
  $blocks['ding_navigation_box'] = array(
    'info' => t('Ding navigation box'),  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_navigation_box_block_view($delta) {
  // Since the module only defines one block, we can ignore $delta.
  $block = array();
  $block['subject'] = t('Ding navigation box');
  // Prepare the render array for the navigation box.
  $navigation_items = ding_navigation_item_get_items();
  $start_item = ding_navigation_item_get_start_item();
  $block['content'] = array(
    '#theme' => 'ding_navigation_box',
    '#items' => $navigation_items,
    '#start_item_position' => $start_item->position,
  );
  return $block;
}

/**
 * Implements hook_menu(). 
 */
function ding_navigation_box_menu() {
  $items[DING_NAV_BOX_ADMIN_PATH] = array(
    'title' => 'Ding navigation box',
    'description' => t('Manage the Ding Navigation Box and it\'s content.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_box_page_manage'),
    'access arguments' => array('administer ding navigation box'),
    'file' => 'ding_navigation_box.pages.inc',
  );
  $items[DING_NAV_BOX_ADMIN_PATH . '/'] = array(
    'title' => 'Manage box',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );  
  $items[DING_NAV_BOX_ADMIN_PATH . '/set/item-position'] = array(
    'title' => 'Change item position',
    'description' => t('Ajax callback for moving a navigation item up or down.'),
    'page callback' => 'ding_navigation_box_change_position_callback',
    'access arguments' => array('administer ding navigation box'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_navigation_box.pages.inc',
  );
  $items[DING_NAV_BOX_ADMIN_PATH . '/edit/%ding_navigation_item'] = array(
    'title' => 'Edit navigation item',
    'description' => t('Edit the chosen Ding navigation item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_item_form', 4),
    'access arguments' => array('administer ding navigation box'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_navigation_box.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_navigation_box_permission() {
  return array(
    'administer ding navigation box' => array(
      'title' => t('Administer Ding navigation box'),
      'description' => t('Allows users to configure the Ding navigation box.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 * 
 * Declares the theme hooks that renders the navigation box.
 */
function ding_navigation_box_theme() {
  return array(
    'ding_navigation_box' => array(
      'variables' => array(
        // The navigation items that should be rendered in the box.
        'items' => array(),
        // TRUE if the navigation box is being rendered on admin pages.
        'admin' => FALSE,
        // The position of the item that should start out as active.
        'start_item_position' => 1,
      ),
      'template' => 'ding-navigation-box',
      'path' => DING_NAV_BOX_PATH . '/theme',
      'file' => 'theme.inc'      
    ) ,
    'ding_nav_box_activation_area' => array(
      'variables' => array(
        // The navigation item of the activation area.
        'item' => NULL,
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-activation-area',
      'path' => DING_NAV_BOX_PATH . '/theme',
      'file' => 'theme.inc' 
    ) ,
    'ding_nav_box_content_area' => array(
      'variables' => array(
        // The navigation item of the content area.
        'item' => NULL,
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-content-area',
      'path' => DING_NAV_BOX_PATH . '/theme',
      'file' => 'theme.inc'  
    ) ,  
  );
}

/* ========================================================================== */
/* Ding navigation item entity                                                */           
/* ========================================================================== */

/**
 * Implements hook_entity_info().
 */
function ding_navigation_box_entity_info() {
  $entity_info['ding_navigation_item'] = array(
    'label' => t('Ding navigation item'),
    'entity class' => 'DingNavigationItem',
    'controller class' => 'DingNavigationItemController',
    'base table' => 'ding_navigation_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'dniid',
    ),
    'static cache' => TRUE,
    // Include the bundle array to get the Field API's 'Manage fields' admin 
    // page attached to the navigation box admin pages.
    'bundles' => array(
      'ding_navigation_item' => array(
        'label' => t('Ding navigation item'), 
        'admin' => array(
          'path' => DING_NAV_BOX_ADMIN_PATH,
          'access arguments' => array('administer ding navigation box'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'ding_navigation_item_create',
    'module' => 'ding_navigation_box',
  );
  return $entity_info;
}

/**
 * Implements hook_field_extra_fields().
 *
 * Display internal fields on the field admin page for navigation items.
 */
function ding_navigation_box_field_extra_fields() {
  $return = array();
  $return['ding_navigation_item']['ding_navigation_item']['form'] = array(
    'title' => array(
      'label' => t('Title'),
      'description' => t('The title of the navigation item.'),
      'weight' => -15,
    ),
    'abbreviation' => array(
      'label' => t('Abbreviation'),
      'description' => t('An abbreviation of the full title to display on small screens.'),
      'weight' => -14,
    ),
  );
  return $return;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Since the navigation box currently doesn't support field formatters, use 
 * this hook to remove the 'Manage display' local task from the navigation box
 * admin page. 
 */
function ding_navigation_box_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (stristr($root_path, DING_NAV_BOX_ADMIN_PATH)) {
    foreach ($data['tabs'][0]['output'] as $delta => $tab) {
      if ($tab['#link']['path'] == DING_NAV_BOX_ADMIN_PATH . '/display') {
        unset($data['tabs'][0]['output'][$delta]);
        return;
      }
    }
  }
}

/**
 * Fetch a navigation item from the database. 
 *
 * @param $dniid
 *   Integer specifying the ding navigation item id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $postit object or FALSE if it cannot be loaded.
 */
function ding_navigation_item_load($dniid = NULL, $reset = FALSE) {
  $dniids = (isset($dniid) ? array($dniid) : array());
  $ding_navigation_item = ding_navigation_item_load_multiple($dniids, array(), $reset);
  return $ding_navigation_item ? reset($ding_navigation_item) : FALSE;
}

/**
 * Fetch mulitple navigation items from the database
 * 
 * @param $dniids
 *   An array of Ding navigation item ids. 
 * @param $conditions
 *   An array of conditions to match against
 * @param $reset
 *   A boolean indicating if the internal cache should be reset.
 * @return
 *   An array of Ding navigation items keyd by the primary key dniid.
 */
function ding_navigation_item_load_multiple($dniids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ding_navigation_item', $dniids, $conditions, $reset);
}

/**
 * Delete a navigation item from the database.
 */
function ding_navigation_item_delete(DingNavigationItem $navigation_item) {
  $dniids = array($navigation_item->dniid);
  ding_navigation_item_delete_multiple($dniids);
}

/**
 * Delete multiple navigation items from the database.
 * 
 * @param $dniids
 *   An array of Ding navigation item IDs to match against.
 */
function ding_navigation_item_delete_multiple($dniids = array()) {
  entity_get_controller('ding_navigation_item')->delete($dniids);
}

/**
 * Create and return a navigation item object.
 */
function ding_navigation_item_create($values = array()) {
  return entity_get_controller('ding_navigation_item')->create($values);
}

/**
 * Saves a navigation item entity to the database.
 * 
 * @param $ding_navigation_item
 *   The Ding navigation item to be saved.
 */
function ding_navigation_item_save(DingNavigationItem $navigation_item) {
  return entity_get_controller('ding_navigation_item')->save($navigation_item);
}

/**
 * Uses EntityFieldQuery to retrieve all navigation items from the database
 * sorted by their current position value. Using this function will ensure
 * that the items will be displayed in the correct order in the navigation box.
 *
 * @return $navigation_items
 *   - An array of navigation item objects keyed by id.
 */
function ding_navigation_item_get_items() {
  // Save the items so we only load them once per request.
  $navigation_items = &drupal_static(__FUNCTION__);

  if (!isset($navigation_items)) {
    $navigation_items = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ding_navigation_item')
          ->propertyOrderBy('position', 'ASC');
    $result = $query->execute();

    if (isset($result['ding_navigation_item'])) {
      $dniids = array_keys($result['ding_navigation_item']);
      $navigation_items = ding_navigation_item_load_multiple($dniids);
    }
  }

  return $navigation_items;
}

/**
 * Returns the navigation item currently set as the start item in the 
 * database. The start item is the navigation that starts out as active when
 * the navigation box is diplayed.
 * If nothing is set, the navigation item with position = 1 is stored as the 
 * start item and used as default.
 *
 * @return $navigation_item
 *   - An object representing the start navigation item.
 */
function ding_navigation_item_get_start_item() {
  // Save the start item so it only gets loaded once.
  $start_item = &drupal_static(__FUNCTION__);

  if (!isset($start_item)) {
    // Look for the ID of the start item in the database.
    if ($start_item_id = variable_get('ding_navigation_box_start_item_id', FALSE)) {
      $start_item = ding_navigation_item_load($start_item_id);  
    }
    else {
      $start_item = ding_navigation_item_get_item_position('1');
      variable_set('ding_navigation_box_start_item_id', $start_item->dniid);
    }
  }

  return $start_item;
}

/**
 * Returns the navigation item with the specified position.
 *
 * @param $position
 *   - The $position of the target item.
 * @return $navigation_item
 *   - An object representing the navigation item with the specified position.
 *   - Returns NULL if there was no item with the specified position.
 */
function ding_navigation_item_get_item_position($position) {
  $navigation_item = NULL;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ding_navigation_item')
        ->propertyCondition('position', $position);
  $result = $query->execute();
  if (isset($result['ding_navigation_item'])) {
    $dniid = array_shift(array_keys($result['ding_navigation_item']));
    $navigation_item = ding_navigation_item_load($dniid);
  }
  return $navigation_item;
}

/**
 * The class used for navigation items.
 */
class DingNavigationItem extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ding_navigation_item');
  }
  
  /**
   * Use the navigation item title as default label for a navigation item.
   */
  protected function defaultLabel() {
    return $this->title;
  }

  /**
   * Link to the edit page for the item, since navigation items isn't meant
   * to be displayed in their own page like normal entities.
   */
  protected function defaultUri() {
    return array('path' => DING_NAV_BOX_ADMIN_PATH . '/edit/' . $this->dniid);
  }  
  
}

/**
 * The controller class used for navigation items.
 */
class DingNavigationItemController extends EntityAPIController {
  
  /**
   * Create a navigation item object.
   * 
   * First setup the values that are specific to the navigation item schema,
   * then go through the parent imlplementation.
   */
  public function create(array $values = array()) {
    $values += array(
      'dniid' => '',
      'title' => '',
      'abbreviation' => '',
      'position' => 0,
      'is_new' => TRUE,
    );
    $ding_navigation_item = parent::create($values);
    return $ding_navigation_item;    
  }
  
  /**
   * Override the buildContent function to setup fields that are specific to
   * navigation items.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = LANGUAGE_NONE, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['title'] = $entity->title;
    $content['abbreviation'] = $entity->abbreviation;
    return $content;
  }
  
}

