<?php

/**
 * @file
 * 
 * This module provides a smart naviagtion box as a block or ctools plugin.
 */

// Constants
define('DING_NAV_BOX_PATH', drupal_get_path('module', 'ding_navigation_box'));
define('DING_NAV_BOX_ADMIN_URI', 'admin/structure/ding-navigation-box');

/**
 * Implements hook_block_info().
 */
function ding_navigation_box_block_info() {
  $blocks = array();
  $blocks['ding_navigation_box'] = array(
    'info' => t('Ding navigation box'),  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Ignoring $delta since we only have 1 block.
 */
function ding_navigation_box_block_view($delta) {
  $block = array();
  $block['subject'] = t('Ding navigation box');
  // Fetch ding-navigation-item node entities from the database.
  $items = _ding_navigation_box_get_items();
  $block['content']['ding_navigation_box'] = array(
    '#theme' => 'ding_navigation_box',
    'activation_areas' => $items['activation_areas'],
    'content_areas' => $items['content_areas'],
  );
  $block['content']['#attached']['js'] = _ding_navigation_box_get_javascript();
  $block['content']['#attached']['css'] = _ding_navigation_box_get_css(); 
  return $block;
}

/**
 * Implements hook_theme().
 * 
 * Declares the theme hooks that renders the Ding navigation box.
 */
function ding_navigation_box_theme() {
  return array(
    'ding_navigation_box' => array(
      'render element' => 'element',
      'template' => 'ding-navigation-box',
      'path' => DING_NAV_BOX_PATH . '/templates',
    ),
    'ding_nav_box_activation_area' => array(
      'variables' => array(
        'item' => NULL,
        // Indicates whether the navigation box is being rendered in the 
        // admin interface.
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-activation-area',
      'path' => DING_NAV_BOX_PATH . '/templates',  
    ),
    'ding_nav_box_content_area' => array(
      'variables' => array(
        'item' => NULL,
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-content-area',
      'path' => DING_NAV_BOX_PATH . '/templates',   
    ),  
  );
}

/**
 * Module template preprocess funtion for the navigation box.
 */
function template_preprocess_ding_navigation_box(&$variables) {
  $element = $variables['element'];
  if (empty($element['activation_areas']) || empty($element['content_areas'])) {
    $variables['activation_areas'] = $variables['content_areas'] = FALSE;
  }
  else {
    $variables['activation_areas'] = $element['activation_areas'];
    $variables['content_areas'] = $element['content_areas'];
  }
}

/**
 * Module template preprocess function for an activation area.
 */
function template_preprocess_ding_nav_box_activation_area(&$variables) {
  $variables['classes_array'][] = 'activation-area';
  // Get the ding navigation item this activation area belongs to.
  $item = $variables['item'];
  $variables['title'] = $item->title;
  $variables['abbreviation'] = $item->abbreviation;
  // If the navigation box is being rendered in admin ui, add a custom data
  // attribute with the ding navigation item id.
  if ($variables['admin']) {
    $variables['attributes_array'] += array(
      'data-dniid' => $item->dniid,
    );
  }
}

/**
 * Module template preprocess function for a content area.
 */
function template_preprocess_ding_nav_box_content_area(&$variables) {
  $variables['classes_array'][] = 'content-area';
  // Get the ding navigation item this content area belongs to.
  $item = $variables['item'];
  // Expose our internal title field to the template.
  $variables['title'] = $item->title;
  // Expose the data from the field_ding_nav_box_header_text field to the template.
  $field_items = field_get_items('ding_navigation_item', $item, 'field_ding_nav_box_header_text');
  if ($field_items) {
    $variables['header_text'] = array();
    foreach ($field_items as $field_item) {
      // Prepare the field item for viewing.
      $field_item = field_view_value('ding_navigation_item', $item, 'field_ding_nav_box_header_text', $field_item);
      $variables['header_text'][] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . $field_item['#markup'] . '</p>',
      );
    }
  }
  $field_items = field_get_items('ding_navigation_item', $item, 'field_ding_nav_box_links');
  if ($field_items) {
    $variables['links'] = array();
    foreach ($field_items as $field_item) {
      $field_item = field_view_value('ding_navigation_item', $item, 'field_ding_nav_box_links', $field_item);
      $variables['links'][] = $field_item;
    }
  }
}

/**
 * Returns an array with all the css for the navigation box that can be used
 * on the attach property in a render array.
 * 
 * @param  boolean $admin (Optional)
 *   If true admin CSS will be included.
 */
function _ding_navigation_box_get_css($admin = false) {
  $css = array();
  $css_base = array(
    'type' => 'file',
    'group' => CSS_DEFAULT,  
  );
  $css[] = array(
    'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box.css',  
  ) + $css_base;
  // If specified, include the admin CSS.
  if ($admin) {
    $css[] = array(
      'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box-admin.css',
    ) + $css_base;
  }
  return $css;
}

/**
 * Returns an array with the javascript for the navigation box. This array can
 * be used on the attached property in a render array.
 * 
 * @param  boolean $admin (Optional)
 *   If true admin JS will be included.
 */
function _ding_navigation_box_get_javascript($admin = false, $settings = array()) {
  $js = array();
  $js_base = array(
    'group' => JS_DEFAULT,
  );
  $js[] = array(
    'type' => 'file',
    'data' => DING_NAV_BOX_PATH . '/js/ding-navigation-box.js',
  ) + $js_base;
  $js[] = array(
    'type' => 'setting',
    'data' => array(
      'dingNavigationBox' => array(
        // Allow the caller to specify the item that should be active when the
        // navigation box is rendererd. If nothing is set, show the first item.
        'activeItemPosition' => isset($settings['activeItemPosition']) ? $settings['activeItemPosition'] : 1,
      ),
    ),    
  ) + $js_base;
  if ($admin) {
    $js[] = array(
      'type' => 'file',
      'data' => DING_NAV_BOX_PATH . '/js/ding-navigation-box-admin.js',
    );
    $js[] = array(
      'type' => 'setting',
      'data' => array(
        'dingNavigationBoxAdmin' => array(
          // If it's the admin ui being rendered, pass the admin uri so the 
          // event handler on the client knows how to build the edit uri for
          // the navigation items.
          'adminURI' => DING_NAV_BOX_ADMIN_URI,
        ),
      ),
    );
  }
  return $js;
}

/**
 * Return an array with the entries for the navigation box setup as 
 * render-arrays.
 */
function _ding_navigation_box_get_items($admin = false) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ding_navigation_item');
  $result = $query->execute();
  // Declare our return array with the navigation items split into activation
  // areas and content areas.
  $return = array();
  $return['activation_areas'] = array();
  $return['content_areas'] = array();  
  if (isset($result['ding_navigation_item'])) {
    $dniids = array_keys($result['ding_navigation_item']);
    $ding_navigation_items = ding_navigation_item_load_multiple($dniids);
    foreach ($ding_navigation_items as $ding_navigation_item) {
      $item_position = $ding_navigation_item->position;
      $return['activation_areas'][$item_position] = array(
        '#theme' => 'ding_nav_box_activation_area',
        '#item' => $ding_navigation_item,
        '#admin' => $admin,
      );
      $return['content_areas'][$item_position] = array(
        '#theme' => 'ding_nav_box_content_area',
        '#item' => $ding_navigation_item,
        '#admin' => $admin,
      );      
    }
  }
  // Sort the navigation items by item position.
  ksort($return['activation_areas']);
  ksort($return['content_areas']);
  return $return; 
}

/* ========================================================================== 
   Ding navigation item
   ========================================================================== */

/**
 * Implements hook_entity_info().
 */
function ding_navigation_box_entity_info() {
  $entity_info['ding_navigation_item'] = array(
    'label' => t('Ding navigation item'),
    'entity class' => 'DingNavigationItem',
    'controller class' => 'DingNavigationItemController',
    'base table' => 'ding_navigation_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'dniid',
    ),
    'static cache' => TRUE,
    // The Ding navigation item is a single bundle entity. This means that the
    // bundles array, as defined below, could be omitted. We choose to include 
    // it here anyway to take advantage of the FIELD API's 'Manage Fields' and 
    // 'Manage Display' admin pages.
    'bundles' => array(
      'ding_navigation_item' => array(
        'label' => t('Ding navigation item'), 
        'admin' => array(
          'path' => DING_NAV_BOX_ADMIN_URI,
          'access arguments' => array('administer ding navigation box'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'ding_navigation_item_create',
    'module' => 'ding_navigation_box',
  );
  return $entity_info;
}

/**
 * Implements hook_menu(). 
 */
function ding_navigation_box_menu() {
  $items[DING_NAV_BOX_ADMIN_URI] = array(
    'title' => 'Navigation box admin',
    'description' => t('Manage the Ding Navigation Box and it\'s content.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_box_page_manage'),
    'access arguments' => array('administer ding navigation box'),
  );
  $items[DING_NAV_BOX_ADMIN_URI . '/edit/%ding_navigation_item'] = array(
    'title' => 'Edit navigation item',
    'description' => t('Edit the chosen Ding navigation item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_item_form', 4),
    'access arguments' => array('administer ding navigation box'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form builder: Form for editing a Ding navigation item.
 */
function ding_navigation_item_form($form, &$form_state, $ding_navigation_item) {
  if (!isset($form_state['ding_navigation_item'])) {
    $form_state['ding_navigation_item'] = $ding_navigation_item;
  }
  $ding_navigation_item = $form_state['ding_navigation_item'];
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $ding_navigation_item->title,
    '#description' => t('The full title of the navigation item.'),
    '#weight' => -15,
    '#required' => TRUE,
    '#maxlength' => 24,
    '#size' => 40,
  );
  $form['abbreviation'] = array(
    '#type' => 'textfield',
    '#title' => t('Title abbreviation'),
    '#default_value' => $ding_navigation_item->abbreviation,
    '#description' => t('An abbreviation of the full title to display on small screens.'),
    '#weight' => -14,
    '#required' => TRUE,
    '#maxlength' => 6,
    '#size' => 12,
  );
  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('ding_navigation_item_form_submit'),
  );
  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('ding_navigation_item_form_cancel'),
  );
  $form['#validate'][] = 'ding_navigation_item_form_validate'; 
  // Let the Field API attach fields assigned to the ding navigation item entity
  field_attach_form('ding_navigation_item', $ding_navigation_item, $form, $form_state);
  // Continue the breadcrumb trail from the previous admin pages.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), '<front>');
  $breadcrumb[] = l(t('Administration'), 'admin');
  $breadcrumb[] = l(t('Structure'), 'admin/structure');
  // Pass the position of the item that is being edited to the admin page, to
  // show the correct item in the navigation box.
  $breadcrumb[] = l(t('Navigation box admin'), DING_NAV_BOX_ADMIN_URI . '/' . $ding_navigation_item->position);
  drupal_set_breadcrumb($breadcrumb);
  return $form;
}

function ding_navigation_item_form_validate($form, &$form_state) {
  $ding_navigation_item = $form_state['ding_navigation_item'];
  // Let the Field API perform validation on the data submitted by the form.
  field_attach_form_validate('ding_navigation_item', $ding_navigation_item, $form, $form_state);
}

/**
 * Submit handler for the submit button on the ding_navigation_item form.
 */
function ding_navigation_item_form_submit($form, &$form_state) {
  $ding_navigation_item = $form_state['ding_navigation_item'];
  $ding_navigation_item->title = $form_state['values']['title'];
  $ding_navigation_item->abbreviation = $form_state['values']['abbreviation'];
  // Let the Field API perform necessary operations on the data submitted by
  // the form
  field_attach_submit('ding_navigation_item', $ding_navigation_item, $form, $form_state);
  // Save and go back.
  ding_navigation_item_save($ding_navigation_item);
  $form_state['redirect'] = DING_NAV_BOX_ADMIN_URI . '/' . $ding_navigation_item->position;
}

/**
 * Submit handler for the cancel button on the ding_navigation_item form.
 */
function ding_navigation_item_form_cancel($form, &$form_state) {
  $ding_navigation_item = $form_state['ding_navigation_item'];
  $form_state['redirect'] = DING_NAV_BOX_ADMIN_URI . '/'. $ding_navigation_item->position; 
}

/**
 * Menu callback: admin/structure/ding-navigation-box/manage/navigation-box.
 */
function ding_navigation_box_page_manage($form, &$form_state, $active_item_position = 1) {
  $ding_navigation_items = _ding_navigation_box_get_items(TRUE);
  $form['ding_navigation_box_admin']['#prefix'] = '<div id=\'ding-navigation-box-admin\'>';
  $form['ding_navigation_box_admin']['#suffix'] = '</div>';

  // Get the acitve navigation item specified by the $active_item_position 
  // parameter.
  $i = 1;
  $found = FALSE;
  while (!$found) {
    $current_item = $ding_navigation_items['activation_areas'][$i]['#item'];
    if ($current_item->position == $active_item_position) {
      $active_item = $current_item;
      $found = TRUE;
    }
    $i++;
  }

  // Setup the edit link to point to the active navigation item.
  $form['ding_navigation_box_admin']['edit_link'] = array(
    '#prefix' => "<div class='edit-item-link'>",
    '#suffix' => '</div>',
    '#theme' => 'link',
    '#text' => 'Edit ' . $active_item->title,
    '#path' => DING_NAV_BOX_ADMIN_URI . '/edit/' . $active_item->dniid,
    '#options' => array('attributes' => array('class' => 'button'), 'html' => FALSE),

  );

  // Setup render array for the navigation box.
  $form['ding_navigation_box_admin']['ding_navigation_box'] = array(
    '#theme' => 'ding_navigation_box',
    'activation_areas' => $ding_navigation_items['activation_areas'],
    'content_areas' => $ding_navigation_items['content_areas'],
  );
  $form['change_item_position'] = array(
    '#type' => 'fieldset',
    '#title' => t('Change position of navigation items.'),
  );
  $form['change_item_position']['move_up'] = array(
    '#type' => 'button',
    '#value' => t('Move up'),
    '#size' => 50,
  );
  $form['change_item_position']['move_down'] = array(
    '#type' => 'button',
    '#value' => t('Mode down'),
    '#size' => 50,
  );
  $settings = array('activeItemPosition' => $active_item_position); // Javascript settings
  $form['#attached']['js'] = _ding_navigation_box_get_javascript(TRUE, $settings);
  $form['#attached']['css'] = _ding_navigation_box_get_css(TRUE);
  return $form;
}

/**
 * Ajax callback function.
 */
function ding_navigation_box_change_position_callback($form, $form_state) {
  //file_put_contents("/home/drupalpro/debug/debug.txt", print_r($form_state , TRUE), FILE_APPEND);
}

/**
 * Implements hook_permission().
 */
function ding_navigation_box_permission() {
  return array(
    'administer ding navigation box' => array(
      'title' => t('Administer Ding navigation box'),
      'description' => t('Allows users to configure the Ding navigation box.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function ding_navigation_box_field_extra_fields() {
  $extra_fields = array(
    'title' => array(
      'label' => t('Title'),
      'description' => t('The title of the navigation item.'),
      'weight' => -15,
    ),
    'abbreviation' => array(
      'label' => t('Abbreviation'),
      'description' => t('An abbreviation of the full title to display on small screens.'),
      'weight' => -14,
    ),
  );
  $return = array();
  $return['ding_navigation_item']['ding_navigation_item'] = array(
    'form' => $extra_fields,
    'display' => $extra_fields,
  );
  return $return;
}

/**
 * Fetch a Ding navigation item from the database. 
 *
 * @param $dniid
 *   Integer specifying the ding navigation item id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $postit object or FALSE if it cannot be loaded.
 */
function ding_navigation_item_load($dniid = NULL, $reset = FALSE) {
  $dniids = (isset($dniid) ? array($dniid) : array());
  $ding_navigation_item = ding_navigation_item_load_multiple($dniids, array(), $reset);
  return $ding_navigation_item ? reset($ding_navigation_item) : FALSE;
}

/**
 * Fetch mulitple Ding naviation items from the database
 * 
 * @param $dniids
 *   An array of Ding navigation item ids. 
 * @param $conditions
 *   An array of conditions to match against
 * @param $reset
 *   A boolean indicating if the internal cache should be reset.
 * @return
 *   An array of Ding navigation items keyd by the primary key dniid.
 */
function ding_navigation_item_load_multiple($dniids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ding_navigation_item', $dniids, $conditions, $reset);
}

/**
 * Delete a Ding navigation item from the database.
 */
function ding_navigation_item_delete(DingNavigationItem $ding_navigation_item) {
  $dniids = array($ding_navigation_item->dniid);
  ding_navigation_item_delete_multiple($dniids);
}

/**
 * Delete multiple Ding naviation items.
 * 
 * @param $dniids
 *   An array of Ding navigation item IDs to match against.
 */
function ding_navigation_item_delete_multiple($dniids = array()) {
  entity_get_controller('ding_navigation_item')->delete($dniids);
}

/**
 * Create and return a Ding navigation item.
 */
function ding_navigation_item_create($values = array()) {
  return entity_get_controller('ding_navigation_item')->create($values);
}

/**
 * Saves a Ding navigation item to the database.
 * 
 * @param $ding_navigation_item
 *   The Ding navigation item to be saved.
 */
function ding_navigation_item_save(DingNavigationItem $ding_navigation_item) {
  return entity_get_controller('ding_navigation_item')->save($ding_navigation_item);
}

/**
 * The class used for Ding navigation items.
 */
class DingNavigationItem extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ding_navigation_item');
  }
  
  /**
   * Specifies the default label, which is picked up by label() by default.
   */
  protected function defaultLabel() {
    return 'Ding navigation item ' . $this->position;
  }

  /**
   * Specifies the default uri, which is picked up by uri() by default.
   */
  protected function defaultUri() {
    return array('path' => 'admin/structure/ding-navigation-box/manage');
  }  
  
}

/**
 * The controller class used for Ding navigation items.
 */
class DingNavigationItemController extends EntityAPIController {
  
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
  /**
   * Create a Ding navigation item
   * 
   * First setup the values that are the specific to the ding navigation item 
   * schema, then go through the parent imlplementation.
   */
  public function create(array $values = array()) {
    // Add values that are specific to the Ding navigation item.
    $values += array(
      'dniid' => '',
      'title' => '',
      'abbreviation' => '',
      'position' => 0,
      'is_new' => TRUE,
    );
    $ding_navigation_item = parent::create($values);
    return $ding_navigation_item;    
  }
  
  /**
   * Override the buildContent function to setup fields that are specific to
   * the ding navigation item.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = LANGUAGE_NONE, $content = array()) {
    // Let the parent class build it's field content first.
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    // We show our internal fields using a theming function from the FIELD
    // API, so the behaviour will be the same as other fields added with the 
    // FIELD API.
    $content['title'] = array(
      '#theme' => 'field',
      '#weight' => -15,
      '#title' => t('Title'),
      '#label_display' => 'hidden',
      '#access' => TRUE,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
      '#field_name' => 'field_ding_navigation_item_title',
      '#field_type' => 'text',
      '#entity_type' => 'ding_navigation_item',
      '#bundle' => 'ding_navigation_item',
      '#items' => array(array('value' => $entity->title)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->title)),
    );
    $content['abbreviation'] = array(
      '#theme' => 'field',
      '#weight' => -14,
      '#title' => t('Abbreviation'),
      '#label_display' => 'hidden',
      '#access' => TRUE,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
      '#field_name' => 'field_ding_navigation_item_abbreviation',
      '#field_type' => 'text',
      '#entity_type' => 'ding_navigation_item',
      '#bundle' => 'ding_navigation_item',
      '#items' => array(array('value' => $entity->abbreviation)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->abbreviation)),
    );
    return $content;
  }
  
}

