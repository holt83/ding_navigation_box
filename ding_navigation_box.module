<?php

/**
 * @file
 * 
 * This module provides a smart naviagtion box as a block or ctools plugin.
 */

// Constants
define('DING_NAV_BOX_PATH', drupal_get_path('module', 'ding_navigation_box'));

/**
 * Implements hook_block_info().
 */
function ding_navigation_box_block_info() {
  $blocks = array();
  $blocks['ding_navigation_box'] = array(
    'info' => t('Ding navigation box'),  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Ignoring $delta since we only have 1 block.
 */
function ding_navigation_box_block_view($delta) {
  $block = array();
  $block['subject'] = t('Ding navigation box');
  // The navigation box consist of entries wich each consist of a navigation 
  // item and a content area. Below we fetch the entries, split them up in items
  // and areas and pass these as render arrays to the navigation box template.
  $entries = _ding_navigation_box_get_entries();
  $block['content']['ding_navigation_box'] = array(
    '#theme' => 'ding_navigation_box',
    'navigation_items' => $entries['navigation_items'],
    'content_areas' => $entries['content_areas'],
  );
  // Attach javascript
  foreach (_ding_navigation_box_get_javascript() as $js) {
    $block['content']['#attached']['js'][] = $js;
  }
  // Attach css
  foreach (_ding_navigation_box_get_css() as $css) {
    $block['content']['#attached']['css'][] = $css; 
  }
  return $block;
}

/**
 * Implements hook_theme().
 * 
 * Declares the theme hooks that renders the Ding navigation box.
 */
function ding_navigation_box_theme() {
  return array(
    'ding_navigation_box' => array(
      'render element' => 'element',
      'template' => 'ding-navigation-box',
      'path' => DING_NAV_BOX_PATH . '/templates',
    ),
    'ding_navigation_box_item' => array(
      'variables' => array(
        'entry_title' => 'Default title',
        'entry_position' => 0,
        'entry' => NULL,  
      ),
      'template' => 'ding-navigation-box-item',
      'path' => DING_NAV_BOX_PATH . '/templates',  
    ),
    'ding_navigation_box_content_area' => array(
      'variables' => array(
        'entry_title' => 'Default title',  
        'entry_content' => '',
        'entry_position' => 0,
        'entry' => NULL,  
      ),
      'template' => 'ding-navigation-box-content-area',
      'path' => DING_NAV_BOX_PATH . '/templates',   
    ),  
  );
}

/**
 * Module template preprocess funtion for the navigation box.
 */
function template_preprocess_ding_navigation_box(&$variables) {
  $element = $variables['element'];
  // If there's no items or content areas present dont render entries at all. 
  if (empty($element['navigation_items']) || empty($element['content_areas'])) {
    $variables['navigation_items'] = $variables['content_areas'] = FALSE;
  }
  // Else we setup the variables for the navigation box template.
  else {
    $variables['navigation_items'] = $element['navigation_items'];
    $variables['content_areas'] = $element['content_areas'];
  }
}

/**
 * Returns an array with all the css for the navigation box that can be used
 * on the attach property in a render array. 
 */
function _ding_navigation_box_get_css() {
  $css = array();
  $css_base = array(
    'type' => 'file',
    'group' => CSS_DEFAULT,  
  );
  $css[] = array(
    'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box.css',  
  ) + $css_base;
  $css[] = array(
    'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box-borders.css',  
  ) + $css_base;
  return $css;
}

/**
 * Returns an array with the javascript for the navigation box. This array can
 * be used on the attached property in a render array.
 */
function _ding_navigation_box_get_javascript() {
  $js = array();
  $js_base = array(
    'group' => JS_DEFAULT,
  );
  $js[] = array(
    'type' => 'file',
    'data' => DING_NAV_BOX_PATH . '/js/ding-navigation-box.js',
  ) + $js_base;
  $js[] = array(
    'type' => 'setting',
    'data' => array(
      'dingNavigationBox' => array(
        'defaultEntryIndex' => 1,
        'activationEvent' => 'mouseenter',  
      ),
    ),    
  ) + $js_base;
  return $js;
}

/**
 * Return an array with the entries for the navigation box setup as 
 * render-arrays.
 */
function _ding_navigation_box_get_entries() {
  // Fetch nodes of type 'ding_navigation_entry' with an EntityFieldQuery.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'ding_navigation_entry');
  $result = $query->execute();
  // Initialize our result and return array.
  $entries_result = array();
  $entries_return['navigation_items'] = array();
  $entries_return['content_areas'] = array();
  // Check to see if the query returned any entries. If so setup the return
  // array with the entry-items and entry-content-areas prepared as render arrays.
  if (isset($result['node'])) {
    $entry_nids = array_keys($result['node']);
    // Load nodes that match the returned nids.
    $entries_result = node_load_multiple($entry_nids);
    // Prepare the field data for display
    field_attach_prepare_view('node', $entries_result, 'full');
    // Allow modules to act - invoke hook_entity_prepare_view().
    entity_prepare_view('node', $entries_result);
    $i = 0;
    foreach ($entries_result as $entry) {
      $i++;
      // Build field content - Setup a renderarray for each field on the entry.
      $entry->content = field_attach_view('node', $entry, 'full');
      $entries_return['navigation_items'][] = array(
        '#theme' => 'ding_navigation_box_item',
        '#entry' => $entry,
        '#entry_position' => $i,
        '#entry_title' => $entry->title,
      );
      $entries_return['content_areas'][] = array(
        '#theme' => 'ding_navigation_box_content_area',
        '#entry' => $entry,
        '#entry_position' => $i,
        '#entry_title' => $entry->title, 
      );
    }
  }
  return $entries_return;
}







