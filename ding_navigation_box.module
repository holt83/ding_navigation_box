<?php

/**
 * @file
 * 
 * This module provides a smart naviagtion box as a block or ctools plugin.
 */

// Constants
define('DING_NAV_BOX_PATH', drupal_get_path('module', 'ding_navigation_box'));
define('DING_NAV_BOX_ADMIN_PATH', 'admin/structure/ding-navigation-box');

/**
 * Implements hook_block_info().
 */
function ding_navigation_box_block_info() {
  $blocks = array();
  $blocks['ding_navigation_box'] = array(
    'info' => t('Ding navigation box'),  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Ignoring $delta since we only have 1 block.
 */
function ding_navigation_box_block_view($delta) {
  $block = array();
  $block['subject'] = t('Ding navigation box');
  $block['content'] = ding_navigation_box_get_render_array();
  $block['content']['#attached']['js'] = _ding_navigation_box_get_javascript();
  $block['content']['#attached']['css'] = _ding_navigation_box_get_css(); 
  return $block;
}

/**
 * Implements hook_menu(). 
 */
function ding_navigation_box_menu() {
  $items[DING_NAV_BOX_ADMIN_PATH] = array(
    'title' => 'Ding navigation box',
    'description' => t('Manage the Ding Navigation Box and it\'s content.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_box_page_manage'),
    'access arguments' => array('administer ding navigation box'),
    'file' => 'ding_navigation_box.pages.inc',
  );
  $items[DING_NAV_BOX_ADMIN_PATH . '/'] = array(
    'title' => 'Manage box',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );  
  $items[DING_NAV_BOX_ADMIN_PATH . '/set/item-position'] = array(
    'title' => 'Change item position',
    'description' => t('Ajax callback for moving a navigation item up or down.'),
    'page callback' => 'ding_navigation_box_change_position_callback',
    'access arguments' => array('administer ding navigation box'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_navigation_box.pages.inc',
  );
  $items[DING_NAV_BOX_ADMIN_PATH . '/edit/%ding_navigation_item'] = array(
    'title' => 'Edit navigation item',
    'description' => t('Edit the chosen Ding navigation item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_navigation_item_form', 4),
    'access arguments' => array('administer ding navigation box'),
    'type' => MENU_CALLBACK,
    'file' => 'ding_navigation_box.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ding_navigation_box_permission() {
  return array(
    'administer ding navigation box' => array(
      'title' => t('Administer Ding navigation box'),
      'description' => t('Allows users to configure the Ding navigation box.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function ding_navigation_box_form_alter(&$form, $form_state, $form_id) {
  // Hide unwanted form elements from the Field API display ui.
  if ($form_id === 'field_ui_display_overview_form') {
    if ($form['#action'] === '/' . DING_NAV_BOX_ADMIN_PATH .  '/display') {
      // Modify the regions of the form.
      $regions['hidden'] = $form['fields']['#regions']['hidden'] = array(
        'title' => t('Internal fields from the entity db table'),
        'message' => t('This is the fields that a navigation item is born with.
          They have no formatters, but the Ding navigation box module takes
          care of displaying them in the box.')
      );
      $regions['visible'] = $form['fields']['#regions']['visible'] = array(
        'title' => t('Default fields from the Field API'),
        'message' => t('This the default fields that a Ding navigation item is
          born with. They are not internal fields, but are added by the Fields
          API.'),
      );
      $form['fields']['#regions'] = $regions;
      
      // TODO: Figure out what this does
      $form['modes']['#attributes']['style'] = 'display: none;';

      // Hide unwanted formatters and labels
      $internal_fields = array('title', 'abbreviation');
      $field_api_fields = array('field_ding_nav_box_header_text', 
        'field_ding_nav_box_links');
      foreach ($internal_fields as $field) {
        $form['fields'][$field]['format']['type']['#attributes']['style'] = 'display: none;';
      }
      foreach ($field_api_fields as $field) {
        $form['fields'][$field]['label']['#attributes']['style'] = 'display: none;';        
      }
    }
  }
}

/**
 * Implements hook_theme().
 * 
 * Declares the theme hooks that renders the Ding navigation box.
 */
function ding_navigation_box_theme() {
  $base = array(
    'path' => DING_NAV_BOX_PATH . '/theme',
    'file' => 'theme.inc'
  );
  return array(
    'ding_navigation_box' => array(
      'render element' => 'element',
      'template' => 'ding-navigation-box',
    ) + $base,
    'ding_nav_box_activation_area' => array(
      'variables' => array(
        'item' => NULL,
        // Indicates whether the navigation box is being rendered in the 
        // admin interface.
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-activation-area', 
    ) + $base,
    'ding_nav_box_content_area' => array(
      'variables' => array(
        'item' => NULL,
        'admin' => FALSE,      
      ),
      'template' => 'ding-nav-box-content-area',  
    ) + $base,  
  );
}

/**
 * Returns an array with all the css for the navigation box that can be used
 * on the attach property in a render array.
 * 
 * @param  boolean $admin (Optional)
 *   If true admin CSS will be included.
 */
function _ding_navigation_box_get_css($admin = false) {
  $css = array();
  $css_base = array(
    'type' => 'file',
    'group' => CSS_DEFAULT,  
  );
  $css[] = array(
    'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box.css',  
  ) + $css_base;
  // When the admin ui is being rendered we need additional CSS.
  if ($admin) {
    $css[] = array(
      'data' => DING_NAV_BOX_PATH . '/css/ding-navigation-box-admin.css',
    ) + $css_base;
  }
  return $css;
}

/**
 * Returns an array with the javascript for the navigation box. This array can
 * be used on the attached property in a render array.
 * 
 * @param  $admin (Optional)
 *   If true admin JS will be included.
 * @param  $settings (Optional)
 *   Override Javascript settings by supplying them in the $settings array.
 *   - If the key 'startItem' is set with a navigation item object, that item
 *     will be used as start item instead of the one from settings. This is 
 *     usefull on the admin page, where the active item should be the one that
 *     is currently being edited.
 */
function _ding_navigation_box_get_javascript($admin = false, $settings = array()) {
  $js[] = array(
    'group' => JS_DEFAULT,
    'type' => 'file',
    'data' => DING_NAV_BOX_PATH . '/js/ding-navigation-box.js',
  );

  // If a start navigation item was specified in the settings array, use that
  // to override the database setting.
  if(isset($settings['startItem'])) {
    $start_navigation_item = $settings['startItem'];
  }
  // Else use the start navigation item stored in the database.
  else if ($start_item_id = variable_get('ding_nav_box_start_navigation_item', FALSE)) {
    $start_navigation_item = ding_navigation_item_load($start_item_id);
  }

  $js[] = array(
    'group' => JS_DEFAULT,
    'type' => 'setting',
    'data' => array(
      'dingNavigationBox' => array(
        'startItemPosition' => $start_navigation_item->position,
      ),
    ),    
  );
  // When the admin ui is being rendered we need additional javascript.
  if ($admin) {
    $js[] = array(
      'group' => JS_DEFAULT,
      'type' => 'file',
      'data' => DING_NAV_BOX_PATH . '/js/ding-navigation-box-admin.js',
    );
    $js[] = array(
      'group' => JS_DEFAULT,
      'type' => 'setting',
      'data' => array(
        'dingNavigationBoxAdmin' => array(
          // If it's the admin ui being rendered, pass the admin uri so the 
          // event handler on the client knows how to build the edit uri for
          // the navigation items.
          'adminPath' => DING_NAV_BOX_ADMIN_PATH,      
        ),
      ),
    );
  }
  return $js;
}

function ding_navigation_box_get_render_array($admin = FALSE) {
  $activation_areas = array();
  $content_areas = array();
  if ($navigation_items = ding_navigation_item_field_query()) {
    foreach ($navigation_items as $navigation_item) {
      $base = array('#item' => $navigation_item, '#admin' => $admin);
      $activation_areas[] = array(
        '#theme' => 'ding_nav_box_activation_area',
      ) + $base;
      $content_areas[] = array(
        '#theme' => 'ding_nav_box_content_area',
      ) + $base;
    }
  }
  $ding_navigation_box_array['ding_navigation_box'] = array(
    '#theme' => 'ding_navigation_box',
    'activation_areas' => $activation_areas,
    'content_areas' => $content_areas,
  );
  return $ding_navigation_box_array;
}
/* ========================================================================== 
   Ding navigation item
   ========================================================================== */

/**
 * Implements hook_entity_info().
 */
function ding_navigation_box_entity_info() {
  $entity_info['ding_navigation_item'] = array(
    'label' => t('Ding navigation item'),
    'entity class' => 'DingNavigationItem',
    'controller class' => 'DingNavigationItemController',
    'base table' => 'ding_navigation_item',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'dniid',
    ),
    'static cache' => TRUE,
    // The Ding navigation item is a single bundle entity. This means that the
    // bundles array, as defined below, could be omitted. We choose to include 
    // it here anyway to take advantage of the FIELD API's 'Manage Fields' and 
    // 'Manage Display' admin pages.
    'bundles' => array(
      'ding_navigation_item' => array(
        'label' => t('Ding navigation item'), 
        'admin' => array(
          'path' => DING_NAV_BOX_ADMIN_PATH,
          'access arguments' => array('administer ding navigation box'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'ding_navigation_item_create',
    'module' => 'ding_navigation_box',
  );
  return $entity_info;
}

/**
 * Implements hook_field_extra_fields().
 */
function ding_navigation_box_field_extra_fields() {
  $extra_fields = array(
    'title' => array(
      'label' => t('Title'),
      'description' => t('The title of the navigation item.'),
      'weight' => -15,
    ),
    'abbreviation' => array(
      'label' => t('Abbreviation'),
      'description' => t('An abbreviation of the full title to display on small screens.'),
      'weight' => -14,
    ),
  );
  $return = array();
  $return['ding_navigation_item']['ding_navigation_item'] = array(
    'form' => $extra_fields,
    'display' => $extra_fields,
  );
  return $return;
}


/**
 * Fetch a Ding navigation item from the database. 
 *
 * @param $dniid
 *   Integer specifying the ding navigation item id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $postit object or FALSE if it cannot be loaded.
 */
function ding_navigation_item_load($dniid = NULL, $reset = FALSE) {
  $dniids = (isset($dniid) ? array($dniid) : array());
  $ding_navigation_item = ding_navigation_item_load_multiple($dniids, array(), $reset);
  return $ding_navigation_item ? reset($ding_navigation_item) : FALSE;
}

/**
 * Fetch mulitple Ding naviation items from the database
 * 
 * @param $dniids
 *   An array of Ding navigation item ids. 
 * @param $conditions
 *   An array of conditions to match against
 * @param $reset
 *   A boolean indicating if the internal cache should be reset.
 * @return
 *   An array of Ding navigation items keyd by the primary key dniid.
 */
function ding_navigation_item_load_multiple($dniids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ding_navigation_item', $dniids, $conditions, $reset);
}

/**
 * Delete a Ding navigation item from the database.
 */
function ding_navigation_item_delete(DingNavigationItem $ding_navigation_item) {
  $dniids = array($ding_navigation_item->dniid);
  ding_navigation_item_delete_multiple($dniids);
}

/**
 * Delete multiple Ding naviation items.
 * 
 * @param $dniids
 *   An array of Ding navigation item IDs to match against.
 */
function ding_navigation_item_delete_multiple($dniids = array()) {
  entity_get_controller('ding_navigation_item')->delete($dniids);
}

/**
 * Create and return a Ding navigation item.
 */
function ding_navigation_item_create($values = array()) {
  return entity_get_controller('ding_navigation_item')->create($values);
}

/**
 * Saves a Ding navigation item to the database.
 * 
 * @param $ding_navigation_item
 *   The Ding navigation item to be saved.
 */
function ding_navigation_item_save(DingNavigationItem $ding_navigation_item) {
  return entity_get_controller('ding_navigation_item')->save($ding_navigation_item);
}

/**
 * Returns a render array with all the navigation items in the system, ready to
 * be rendered with the navigation box.
 * Returns FALSE if the items couldn't be loaded.
 */
function ding_navigation_item_get_items_render_array($admin = false) {
  $return = FALSE;
  if ($navigation_items = ding_navigation_item_field_query()) {
    $return = array();
    // Store the navigation items, so they can passed along later.
    $return['navigation_items'] = $navigation_items;
    // Each item has an activation area and a content area. 
    $return['activation_areas'] = array();
    $return['content_areas'] = array();
    foreach ($navigation_items as $navigation_item) {
      $base = array('#item' => $navigation_item, '#admin' => $admin);
      $return['activation_areas'][] = array(
        '#theme' => 'ding_nav_box_activation_area',
      ) + $base;
      $return['content_areas'][] = array(
        '#theme' => 'ding_nav_box_content_area',
      ) + $base;
    }
  }
  return $return;
}

/**
 * Uses EntityFieldQuery to search the database for a navigation item with the
 * specified values.
 * All parameters are optional. If no parameters is passed the function will
 * return all the navigation items sorted by position.
 *
 * @param $field
 *   - The name of the field where the value is stored
 * @param $value
 *   - The value to match against
 * @param $sort
 *   - Inidicates whether the items should be sorted
 * @param $operator
<<<<<<< HEAD
 *   - The operator to use when matching against the value
=======
 *   - The operator to use when matching against the value. Defaults to '='
 * @return $navigation_items
 *   - An array with navigation item objects keyed by dniid.
>>>>>>> a949375a34b6f0da4d67a79806dc8d698f1d5f3a
 */
function ding_navigation_item_field_query($field = 'position', $value = '0', $operator = '>', $sort = TRUE) {
  $internal_fields = array('title', 'abbreviation', 'position');
  // Find the name of the function to use on the query.
  if (in_array($field, $internal_fields)) {
    $function_name = 'propertyCondition';
  }
  else {
    $function_name = 'fieldCondition';
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'ding_navigation_item')
        ->$function_name($field, $value, $operator);
  if ($sort) {
    $query->propertyOrderBy('position', 'ASC');
  }
  $result = $query->execute();
  $navigation_items = FALSE;
  if (isset($result['ding_navigation_item'])) {
    $dniids = array_keys($result['ding_navigation_item']);
    $navigation_items = ding_navigation_item_load_multiple($dniids);
  }
  return $navigation_items;  
}

function ding_navigation_box_init() {
  $navigation_items = ding_navigation_item_field_query();
  file_put_contents("/home/drupalpro/debug/debug.txt", print_r($navigation_items , TRUE), FILE_APPEND);
}

/**
 * The class used for Ding navigation items.
 */
class DingNavigationItem extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ding_navigation_item');
  }
  
  /**
   * Specifies the default label, which is picked up by label() by default.
   */
  protected function defaultLabel() {
    return $this->title;
  }

  /**
   * Specifies the default uri, which is picked up by uri() by default.
   * Since the ding navigation items are not meant to be viewed like nodes on
   * their own page, just link to the edit form here.
   */
  protected function defaultUri() {
    return array('path' => 'admin/structure/ding-navigation-box/edit/' . $this->dniid);
  }  
  
}

/**
 * The controller class used for Ding navigation items.
 */
class DingNavigationItemController extends EntityAPIController {
  
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
  /**
   * Create a Ding navigation item
   * 
   * First setup the values that are the specific to the ding navigation item 
   * schema, then go through the parent imlplementation.
   */
  public function create(array $values = array()) {
    // Add values that are specific to the Ding navigation item.
    $values += array(
      'dniid' => '',
      'title' => '',
      'abbreviation' => '',
      'position' => 0,
      'is_new' => TRUE,
    );
    $ding_navigation_item = parent::create($values);
    return $ding_navigation_item;    
  }
  
  /**
   * Override the buildContent function to setup fields that are specific to
   * the ding navigation item.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = LANGUAGE_NONE, $content = array()) {
    // Let the parent class build it's field content first.
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    // Attach our internal fields to the content array.
    $content['title'] = $entity->title;
    $content['abbreviation'] = $entity->abbreviation;
    return $content;
  }
  
}

